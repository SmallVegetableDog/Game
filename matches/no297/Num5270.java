package matches.no297;

/**
 * 5270. 网格中的最小路径代价 显示英文描述
 * 通过的用户数839
 * 尝试过的用户数956
 * 用户总通过次数839
 * 用户总提交次数1045
 * 题目难度Medium
 * 给你一个下标从 0 开始的整数矩阵 grid ，矩阵大小为 m x n ，由从 0 到 m * n - 1 的不同整数组成。你可以在此矩阵中，从一个单元格移动到 下一行 的任何其他单元格。如果你位于单元格 (x, y) ，且满足 x < m - 1 ，你可以移动到 (x + 1, 0), (x + 1, 1), ..., (x + 1, n - 1) 中的任何一个单元格。注意： 在最后一行中的单元格不能触发移动。
 * <p>
 * 每次可能的移动都需要付出对应的代价，代价用一个下标从 0 开始的二维数组 moveCost 表示，该数组大小为 (m * n) x n ，其中 moveCost[i][j] 是从值为 i 的单元格移动到下一行第 j 列单元格的代价。从 grid 最后一行的单元格移动的代价可以忽略。
 * <p>
 * grid 一条路径的代价是：所有路径经过的单元格的 值之和 加上 所有移动的 代价之和 。从 第一行 任意单元格出发，返回到达 最后一行 任意单元格的最小路径代价。
 * <p>
 * <p>
 * <p>
 * 示例 1：
 * <p>
 * <p>
 * <p>
 * 输入：grid = [[5,3],[4,0],[2,1]], moveCost = [[9,8],[1,5],[10,12],[18,6],[2,4],[14,3]]
 * 输出：17
 * 解释：最小代价的路径是 5 -> 0 -> 1 。
 * - 路径途经单元格值之和 5 + 0 + 1 = 6 。
 * - 从 5 移动到 0 的代价为 3 。
 * - 从 0 移动到 1 的代价为 8 。
 * 路径总代价为 6 + 3 + 8 = 17 。
 * 示例 2：
 * <p>
 * 输入：grid = [[5,1,2],[4,0,3]], moveCost = [[12,10,15],[20,23,8],[21,7,1],[8,1,13],[9,10,25],[5,3,2]]
 * 输出：6
 * 解释：
 * 最小代价的路径是 2 -> 3 。
 * - 路径途经单元格值之和 2 + 3 = 5 。
 * - 从 2 移动到 3 的代价为 1 。
 * 路径总代价为 5 + 1 = 6 。
 * <p>
 * <p>
 * 提示：
 * <p>
 * m == grid.length
 * n == grid[i].length
 * 2 <= m, n <= 50
 * grid 由从 0 到 m * n - 1 的不同整数组成
 * moveCost.length == m * n
 * moveCost[i].length == n
 * 1 <= moveCost[i][j] <= 100
 */
public class Num5270 {

    public static void main(String[] args) {

        int[][] grid = {
                {28, 35, 29, 5, 13, 17, 18, 23, 14},
                {30, 15, 12, 27, 2, 26, 25, 19, 7},
                {1, 16, 34, 21, 9, 3, 20, 24, 8},
                {4, 33, 22, 11, 31, 0, 6, 10, 32}};
        int[][] moveCost = {
                {87, 46, 11, 33, 55, 26, 26, 56, 23},
                {77, 56, 72, 49, 35, 18, 37, 66, 37},
                {54, 40, 62, 1, 64, 49, 95, 81, 77},
                {80, 7, 76, 71, 91, 67, 75, 84, 52},
                {65, 11, 13, 15, 9, 34, 10, 98, 20},
                {1, 95, 100, 61, 33, 47, 28, 100, 44},
                {39, 56, 94, 7, 64, 91, 66, 34, 70},
                {37, 99, 62, 7, 23, 78, 74, 89, 97},
                {84, 41, 63, 42, 84, 15, 46, 31, 11},
                {60, 36, 27, 25, 37, 18, 4, 90, 43},
                {35, 83, 90, 37, 91, 27, 61, 99, 53},
                {85, 2, 98, 99, 67, 70, 38, 91, 68},
                {66, 46, 7, 99, 26, 81, 95, 51, 51},
                {41, 96, 66, 84, 61, 73, 78, 28, 63},
                {38, 34, 49, 55, 35, 29, 93, 5, 28},
                {3, 30, 80, 20, 23, 10, 93, 40, 33},
                {8, 86, 47, 15, 45, 84, 47, 19, 58},
                {72, 5, 76, 82, 60, 50, 13, 74, 38},
                {4, 8, 25, 38, 29, 4, 60, 81, 21},
                {65, 50, 74, 32, 9, 47, 71, 55, 14},
                {90, 30, 92, 51, 45, 51, 4, 85, 22},
                {30, 56, 1, 45, 63, 72, 91, 73, 60},
                {51, 61, 53, 49, 44, 99, 11, 5, 3},
                {24, 54, 91, 11, 5, 30, 50, 89, 44},
                {87, 97, 46, 92, 93, 41, 64, 73, 15},
                {94, 76, 90, 80, 30, 9, 88, 8, 33},
                {50, 34, 4, 63, 49, 90, 46, 55, 16},
                {10, 46, 80, 21, 97, 69, 70, 85, 31},
                {10, 66, 74, 43, 65, 45, 85, 34, 91},
                {82, 26, 77, 10, 2, 5, 89, 39, 4},
                {80, 70, 89, 73, 54, 61, 100, 89, 23},
                {30, 66, 80, 51, 3, 34, 92, 100, 63},
                {74, 15, 4, 33, 37, 3, 87, 76, 92},
                {44, 43, 77, 99, 27, 1, 23, 10, 8},
                {8, 74, 17, 35, 31, 84, 97, 98, 34},
                {99, 9, 28, 43, 55, 39, 93, 64, 93}};

//        int[][] grid = {
//                {5, 3},
//                {4, 0},
//                {2, 1}};
//        int[][] moveCost = {
//                {9, 8},
//                {1, 5},
//                {10, 12},
//                {18, 6},
//                {2, 4},
//                {14, 3}};
        Num5270 num5270 = new Num5270();
        System.out.println(num5270.minPathCost(grid, moveCost));
    }

    public int minPathCost(int[][] grid, int[][] moveCost) {
        int m = grid.length;
        int n = grid[0].length;
        int[][] cost = new int[m][n];

        for (int j = 0; j < n; j++) {
            cost[0][j] = grid[0][j];
        }
        for (int i = 1; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int min = Integer.MAX_VALUE;
                for (int c = 0; c < n; c++) {
                    int preVal = grid[i - 1][c];
                    min = Math.min(moveCost[preVal][j] + cost[i - 1][c], min);
                }
                cost[i][j] = min + grid[i][j];
            }
        }
        int res = cost[m - 1][0];
        for (int j = 1; j < n; j++) {
            res = Math.min(res, cost[m - 1][j]);
        }
        return res;
    }
}
